#include <bits/stdc++.h>
using namespace std;

#define MAXTIMES 30000000

int k, n, cnt, times;
int a[110], v[110][110];

const int b[32][15] = 
{
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,2,4,5,6,9,10,11,11,14,17,19,23,29,0 },
	{ 0,4,5,6,10,11,12,15,18,20,24,25,0,0,0 },
	{ 0,4,5,6,7,8,9,10,14,15,21,27,31,0,0 },
	{ 0,5,6,7,8,9,10,11,14,15,16,19,22,28,0 },
	{ 0,6,7,10,11,15,17,20,23,25,29,0,0,0,0 },
	{ 0,7,10,11,12,13,16,17,18,21,24,26,0,0,0 },
	{ 0,11,12,13,17,18,22,27,30,0,0,0,0,0,0 },
	{ 0,9,10,11,12,13,14,15,20,26,30,0,0,0,0 },
	{ 0,10,11,12,13,14,15,19,21,27,31,0,0,0,0 },
	{ 0,11,12,13,14,15,16,17,20,21,22,25,28,0,0 },
	{ 0,12,13,15,16,17,18,21,22,23,26,29,0,0,0 },
	{ 0,13,17,18,22,24,27,30,0,0,0,0,0,0,0 },
	{ 0,17,18,23,28,31,0,0,0,0,0,0,0,0,0 },
	{ 0,15,16,17,18,19,20,21,25,26,30,0,0,0,0 },
	{ 0,16,17,18,19,20,21,22,25,26,27,31,0,0,0 },
	{ 0,17,18,21,22,26,28,0,0,0,0,0,0,0,0 },
	{ 0,18,21,22,23,24,27,28,29,30,0,0,0,0,0 },
	{ 0,22,23,24,28,29,31,0,0,0,0,0,0,0,0 },
	{ 0,20,21,22,23,24,25,26,0,0,0,0,0,0,0 },
	{ 0,21,22,23,24,25,26,30,0,0,0,0,0,0,0 },
	{ 0,22,23,24,25,26,27,28,30,31,0,0,0,0,0 },
	{ 0,23,24,26,27,28,29,30,31,0,0,0,0,0,0 },
	{ 0,24,28,29,31,0,0,0,0,0,0,0,0,0,0 },
	{ 0,28,29,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,26,27,28,29,0,0,0,0,0,0,0,0,0,0 },
	{ 0,27,28,29,30,31,0,0,0,0,0,0,0,0,0 },
	{ 0,28,29,30,31,0,0,0,0,0,0,0,0,0,0 },
	{ 0,29,30,31,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,31,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
};

bool update(int x, int val)
{
	bool res = true;
	for (int i = 1; b[x][i] != 0; i++)
	{
		v[b[x][i]][a[x]] += val;
		if (a[b[x][i]] != 0 && v[b[x][i]][a[b[x][i]]] != 0) res = false;
	}
	return res;
}

void dfs(int x)
{
	//times++;
	//if (times > MAXTIMES) return;
	if (x == 32)
	{
		cnt++;
		if (cnt == n)
		{
			cout << "Found" << endl;
			//cout << "Solution " << cnt << ": ";
			for (int i = 1; i <= 31; i++)
				cout << a[i] << " ";
			cout << endl;
		}
		return;
	}
	if (a[x] != 0)
	{
		if (!update(x, 1))
		{
			update(x, -1);
			return;
		}
		dfs(x + 1);
		update(x, -1);
		return;
	}
	if (cnt >= n) return;
	for (int i = 1; i <= k; i++)
	{
		if (cnt >= n) return;
		if (v[x][i] == 0)
		{
			a[x] = i;
			if (!update(x, 1))
			{
				update(x, -1);
				a[x] = 0;
				continue;
			}
			dfs(x + 1);
			update(x, -1);
			a[x] = 0;
		}
	}
}

int main()
{
	// need check
	freopen("hexodoku.in", "r", stdin);
	freopen("hexodoku.out", "w", stdout);
	ios::sync_with_stdio(false);
	
	cin >> k >> n;
	for (int i = 1; i <= 31; i++)
		cin >> a[i];
	dfs(1);
	if (cnt < n)
		cout << "No way" << endl;

	return 0;
}


